name: Code Quality

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
      - develop

permissions:
  contents: read
  pull-requests: write
  issues: write
  statuses: write

env:
  CI: true

jobs:
  lint-check:
    name: Lint Check
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm lint --format json --output-file eslint-report.json
        continue-on-error: true

      - name: Annotate code linting results
        uses: ataylorme/eslint-annotate-action@v3
        if: always()
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          report-json: eslint-report.json
          check-name: 'ESLint Report'

      - name: Upload ESLint report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: eslint-report
          path: eslint-report.json
          retention-days: 30

  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run type check
        run: pnpm check:type

  style-check:
    name: Style Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Stylelint
        run: pnpm lint:stylelint
        continue-on-error: true

      - name: Run Prettier check
        run: pnpm format:check
        continue-on-error: true

  security-check:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Run pnpm audit
        run: pnpm audit --audit-level=moderate
        continue-on-error: true

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Upload audit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-report
          path: |
            pnpm-audit.json
            npm-audit.json
          retention-days: 30

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          deny-licenses: GPL-3.0, AGPL-3.0

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests with coverage
        run: pnpm test:unit --coverage
        continue-on-error: true

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=your-project-key
            -Dsonar.organization=your-org
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.sources=packages,apps
            -Dsonar.tests=packages,apps
            -Dsonar.test.inclusions=**/__tests__/**,**/*.test.ts,**/*.spec.ts
            -Dsonar.coverage.exclusions=**/__tests__/**,**/*.test.ts,**/*.spec.ts,**/node_modules/**

  comment-summary:
    name: Comment Quality Summary
    needs: [lint-check, type-check, style-check, security-check]
    if: github.event_name == 'pull_request' && always()
    runs-on: ubuntu-latest

    steps:
      - name: Create quality summary comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const lintResult = '${{ needs.lint-check.result }}';
            const typeResult = '${{ needs.type-check.result }}';
            const styleResult = '${{ needs.style-check.result }}';
            const securityResult = '${{ needs.security-check.result }}';

            const statusIcon = (result) => {
              if (result === 'success') return '‚úÖ';
              if (result === 'failure') return '‚ùå';
              return '‚ö†Ô∏è';
            };

            let comment = '## üîç Code Quality Report\n\n';
            comment += '| Check | Status |\n';
            comment += '|-------|--------|\n';
            comment += `| ESLint | ${statusIcon(lintResult)} ${lintResult} |\n`;
            comment += `| TypeScript | ${statusIcon(typeResult)} ${typeResult} |\n`;
            comment += `| Style | ${statusIcon(styleResult)} ${styleResult} |\n`;
            comment += `| Security | ${statusIcon(securityResult)} ${securityResult} |\n\n`;

            const allSuccess = [lintResult, typeResult, styleResult, securityResult]
              .every(r => r === 'success');

            if (allSuccess) {
              comment += 'üéâ **All checks passed!** Your code meets quality standards.\n';
            } else {
              comment += '‚ö†Ô∏è **Some checks failed.** Please review the details above.\n';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  quality-gate:
    name: Quality Gate
    needs: [lint-check, type-check, style-check, security-check]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Check quality gate
        run: |
          LINT_RESULT="${{ needs.lint-check.result }}"
          TYPE_RESULT="${{ needs.type-check.result }}"
          STYLE_RESULT="${{ needs.style-check.result }}"
          SECURITY_RESULT="${{ needs.security-check.result }}"

          echo "Lint Check: $LINT_RESULT"
          echo "Type Check: $TYPE_RESULT"
          echo "Style Check: $STYLE_RESULT"
          echo "Security Check: $SECURITY_RESULT"

          if [ "$LINT_RESULT" != "success" ] || [ "$TYPE_RESULT" != "success" ]; then
            echo "‚ùå Quality gate failed: Critical checks did not pass"
            exit 1
          fi

          if [ "$STYLE_RESULT" != "success" ] || [ "$SECURITY_RESULT" != "success" ]; then
            echo "‚ö†Ô∏è Quality gate warning: Some checks failed but not blocking"
          fi

          echo "‚úÖ Quality gate passed"