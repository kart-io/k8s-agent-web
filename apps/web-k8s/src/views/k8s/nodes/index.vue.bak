<script lang="ts" setup>
import type { VxeGridProps } from '#/adapter/vxe-table';
import type { Node } from '#/api/k8s/types';

import { ref, watch } from 'vue';

import { Button, Input, message, Modal, Select, Space, Tag } from 'ant-design-vue';
import {
  DeleteOutlined,
  EyeOutlined,
  ReloadOutlined,
  SearchOutlined,
} from '@ant-design/icons-vue';
import { useDebounceFn } from '@vueuse/core';

import { useVbenVxeGrid } from '#/adapter/vxe-table';

import { getMockNodeList } from '#/api/k8s/mock';

defineOptions({
  name: 'NodesManagement',
});

const selectedClusterId = ref('cluster-prod-01');
const searchKeyword = ref('');

const clusterOptions = [
  { label: 'Production Cluster', value: 'cluster-prod-01' },
  { label: 'Staging Cluster', value: 'cluster-staging-01' },
  { label: 'Development Cluster', value: 'cluster-dev-01' },
];

// AbortController 用于取消请求
let abortController: AbortController | null = null;

async function fetchNodeData(params: { page: { currentPage: number; pageSize: number } }) {
  // 取消之前的请求
  if (abortController) {
    abortController.abort();
  }

  // 创建新的 AbortController
  abortController = new AbortController();

  try {
    // 模拟 API 延迟
    await new Promise((resolve, reject) => {
      const timeoutId = setTimeout(resolve, 500);
      abortController!.signal.addEventListener('abort', () => {
        clearTimeout(timeoutId);
        reject(new Error('Request aborted'));
      });
    });

    const result = getMockNodeList({
      clusterId: selectedClusterId.value,
      page: params.page.currentPage,
      pageSize: params.page.pageSize,
    });

    // 客户端搜索过滤
    let items = result.items;
    if (searchKeyword.value) {
      const keyword = searchKeyword.value.toLowerCase();
      items = items.filter((node) =>
        node.metadata.name.toLowerCase().includes(keyword)
      );
    }

    return {
      items,
      total: searchKeyword.value ? items.length : result.total,
    };
  } catch (error: any) {
    // 如果是取消请求,返回空结果
    if (error.message === 'Request aborted') {
      return { items: [], total: 0 };
    }
    throw error;
  }
}

const gridOptions: VxeGridProps<Node> = {
  height: 600,
  checkboxConfig: {
    highlight: true,
  },
  scrollY: {
    enabled: true,
    mode: 'wheel',
  },
  columns: [
    { title: '序号', type: 'seq', width: 60 },
    { align: 'left', title: '选择', type: 'checkbox', width: 80 },
    {
      field: 'metadata.name',
      title: 'Node 名称',
      minWidth: 180,
    },
    {
      field: 'status',
      title: '状态',
      width: 120,
      slots: {
        default: 'status-slot',
      },
    },
    {
      field: 'metadata.labels',
      title: '角色',
      width: 120,
      slots: {
        default: 'role-slot',
      },
    },
    {
      field: 'status.capacity.cpu',
      title: 'CPU (核)',
      width: 120,
    },
    {
      field: 'status.capacity.memory',
      title: '内存',
      width: 120,
    },
    {
      field: 'status.nodeInfo.kubeletVersion',
      title: 'Kubelet 版本',
      width: 140,
    },
    {
      field: 'status.nodeInfo.osImage',
      title: '操作系统',
      minWidth: 220,
    },
    {
      field: 'status.addresses',
      title: 'IP 地址',
      width: 150,
      slots: {
        default: 'ip-slot',
      },
    },
    {
      field: 'metadata.creationTimestamp',
      title: '创建时间',
      width: 180,
      formatter: 'formatDateTime',
    },
    {
      field: 'actions',
      title: '操作',
      width: 180,
      fixed: 'right',
      slots: {
        default: 'actions-slot',
      },
    },
  ],
  exportConfig: {},
  keepSource: true,
  proxyConfig: {
    ajax: {
      query: async ({ page }) => {
        return await fetchNodeData({
          page: { currentPage: page.currentPage, pageSize: page.pageSize },
        });
      },
    },
  },
  toolbarConfig: {
    custom: true,
    export: true,
    refresh: true,
    zoom: true,
  },
};

const [Grid, gridApi] = useVbenVxeGrid({ gridOptions });

// 防抖搜索处理
const debouncedSearch = useDebounceFn(() => {
  gridApi.reload();
}, 300);

function handleSearch() {
  gridApi.reload();
}

// 监听关键词变化,自动触发防抖搜索
watch(searchKeyword, () => {
  debouncedSearch();
});

function handleReset() {
  searchKeyword.value = '';
  gridApi.reload();
}

function handleView(row: Node) {
  const internalIP = row.status?.addresses?.find((addr) => addr.type === 'InternalIP')?.address || '未知';
  const conditions = row.status?.conditions || [];
  const readyCondition = conditions.find((c) => c.type === 'Ready');

  Modal.info({
    title: 'Node 详情',
    width: 700,
    content: `
      名称: ${row.metadata.name}
      状态: ${readyCondition?.status === 'True' ? '就绪' : '未就绪'}
      内部 IP: ${internalIP}
      CPU 容量: ${row.status?.capacity?.cpu || '未知'}
      内存容量: ${row.status?.capacity?.memory || '未知'}
      Pod 容量: ${row.status?.capacity?.pods || '未知'}
      Kubelet 版本: ${row.status?.nodeInfo?.kubeletVersion || '未知'}
      容器运行时: ${row.status?.nodeInfo?.containerRuntimeVersion || '未知'}
      操作系统: ${row.status?.nodeInfo?.osImage || '未知'}
      内核版本: ${row.status?.nodeInfo?.kernelVersion || '未知'}
      创建时间: ${row.metadata.creationTimestamp || '未知'}
    `,
  });
}

function handleCordon(row: Node) {
  Modal.confirm({
    title: '确认封锁',
    content: `确定要封锁节点 "${row.metadata.name}" 吗？封锁后将不会调度新的 Pod 到此节点。`,
    onOk() {
      message.success(`节点 "${row.metadata.name}" 封锁成功`);
      gridApi.reload();
    },
  });
}

function handleDrain(row: Node) {
  Modal.confirm({
    title: '确认驱逐',
    content: `确定要驱逐节点 "${row.metadata.name}" 上的所有 Pod 吗？此操作将影响运行中的工作负载。`,
    onOk() {
      message.success(`节点 "${row.metadata.name}" 驱逐成功`);
      gridApi.reload();
    },
  });
}

function handleDelete(row: Node) {
  Modal.confirm({
    title: '确认删除',
    content: `确定要删除节点 "${row.metadata.name}" 吗？此操作不可恢复，将会影响集群的可用资源。`,
    onOk() {
      message.success(`节点 "${row.metadata.name}" 删除成功`);
      gridApi.reload();
    },
  });
}
</script>

<template>
  <div class="p-5">
    <div class="mb-5 text-2xl font-bold">Node 管理</div>

    <div class="mb-4 rounded-lg p-4">
      <Space :size="12" wrap>
        <Select
          v-model:value="selectedClusterId"
          :options="clusterOptions"
          :style="{ width: '200px' }"
          placeholder="选择集群"
          @change="handleSearch"
        />

        <Input
          v-model:value="searchKeyword"
          :style="{ width: '240px' }"
          placeholder="搜索 Node 名称"
          allow-clear
          @press-enter="handleSearch"
        >
          <template #prefix>
            <SearchOutlined />
          </template>
        </Input>

        <Button type="primary" @click="handleSearch">
          <SearchOutlined />
          搜索
        </Button>

        <Button @click="handleReset">
          <ReloadOutlined />
          重置
        </Button>
      </Space>
    </div>

    <div class="rounded-lg p-4">
      <Grid>
        <template #status-slot="{ row }">
          <Tag
            v-if="row.status?.conditions?.find((c: any) => c.type === 'Ready')?.status === 'True'"
            color="success"
          >
            就绪
          </Tag>
          <Tag v-else color="error">未就绪</Tag>
        </template>

        <template #role-slot="{ row }">
          <Tag v-if="row.metadata.labels?.['kubernetes.io/role'] === 'master'" color="purple">
            Master
          </Tag>
          <Tag v-else color="blue">Worker</Tag>
        </template>

        <template #ip-slot="{ row }">
          <span>{{
            row.status?.addresses?.find((addr: any) => addr.type === 'InternalIP')?.address || '未知'
          }}</span>
        </template>

        <template #actions-slot="{ row }">
          <Space :size="4">
            <Button size="small" type="link" @click="handleView(row)">
              <EyeOutlined />
              详情
            </Button>
            <Button size="small" type="link" @click="handleCordon(row)"> 封锁 </Button>
            <Button size="small" type="link" @click="handleDrain(row)"> 驱逐 </Button>
            <Button size="small" type="link" danger @click="handleDelete(row)">
              <DeleteOutlined />
              删除
            </Button>
          </Space>
        </template>

        <template #toolbar-tools>
          <Button class="mr-2" type="primary" @click="() => gridApi.query()">
            刷新当前页
          </Button>
        </template>
      </Grid>
    </div>
  </div>
</template>

<style scoped>
:deep(.vxe-table) {
  font-size: 14px;
}
</style>
