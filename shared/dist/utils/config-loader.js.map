{"version":3,"file":"config-loader.js","sources":["../../src/utils/config-loader.js"],"sourcesContent":["/**\n * Configuration Loader and Validator\n *\n * Loads and validates micro-app configuration against JSON schema.\n * Provides helper functions for accessing configuration safely.\n */\n\n/**\n * Validate a value against a JSON schema property definition\n * This is a simplified validator - for production, consider using ajv or similar\n *\n * @param {any} value - Value to validate\n * @param {Object} schema - JSON schema property definition\n * @param {string} path - Property path for error reporting\n * @returns {Array} Array of validation errors (empty if valid)\n */\nfunction validateProperty(value, schema, path = '') {\n  const errors = []\n\n  // Check required type\n  if (schema.type) {\n    const actualType = Array.isArray(value) ? 'array' : typeof value\n    const expectedType = schema.type\n\n    if (expectedType === 'integer') {\n      if (!Number.isInteger(value)) {\n        errors.push({\n          path,\n          message: `Expected integer, got ${actualType}`,\n          value\n        })\n        return errors\n      }\n    } else if (actualType !== expectedType) {\n      errors.push({\n        path,\n        message: `Expected ${expectedType}, got ${actualType}`,\n        value\n      })\n      return errors\n    }\n  }\n\n  // String validations\n  if (typeof value === 'string') {\n    if (schema.pattern) {\n      const regex = new RegExp(schema.pattern)\n      if (!regex.test(value)) {\n        errors.push({\n          path,\n          message: `Value does not match pattern: ${schema.pattern}`,\n          value\n        })\n      }\n    }\n    if (schema.minLength !== undefined && value.length < schema.minLength) {\n      errors.push({\n        path,\n        message: `String length ${value.length} is less than minimum ${schema.minLength}`,\n        value\n      })\n    }\n    if (schema.maxLength !== undefined && value.length > schema.maxLength) {\n      errors.push({\n        path,\n        message: `String length ${value.length} exceeds maximum ${schema.maxLength}`,\n        value\n      })\n    }\n  }\n\n  // Number validations\n  if (typeof value === 'number') {\n    if (schema.minimum !== undefined && value < schema.minimum) {\n      errors.push({\n        path,\n        message: `Value ${value} is less than minimum ${schema.minimum}`,\n        value\n      })\n    }\n    if (schema.maximum !== undefined && value > schema.maximum) {\n      errors.push({\n        path,\n        message: `Value ${value} exceeds maximum ${schema.maximum}`,\n        value\n      })\n    }\n  }\n\n  // Object validations\n  if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n    if (schema.required) {\n      for (const requiredProp of schema.required) {\n        if (!(requiredProp in value)) {\n          errors.push({\n            path: `${path}.${requiredProp}`,\n            message: `Required property missing: ${requiredProp}`,\n            value: undefined\n          })\n        }\n      }\n    }\n\n    if (schema.properties) {\n      for (const [propName, propValue] of Object.entries(value)) {\n        const propSchema = schema.properties[propName]\n        if (propSchema) {\n          const propErrors = validateProperty(\n            propValue,\n            propSchema,\n            path ? `${path}.${propName}` : propName\n          )\n          errors.push(...propErrors)\n        }\n      }\n    }\n  }\n\n  return errors\n}\n\n/**\n * Validate micro-app configuration against schema\n *\n * @param {Object} config - Configuration object to validate\n * @param {Object} schema - JSON schema definition\n * @returns {Object} Validation result { valid: boolean, errors: Array }\n */\nexport function validateConfig(config, schema) {\n  const errors = []\n\n  if (!config || typeof config !== 'object') {\n    return {\n      valid: false,\n      errors: [{\n        path: '',\n        message: 'Configuration must be an object',\n        value: config\n      }]\n    }\n  }\n\n  // Validate using patternProperties (for dynamic app names)\n  if (schema.patternProperties) {\n    const pattern = Object.keys(schema.patternProperties)[0]\n    const appSchema = schema.patternProperties[pattern]\n    const regex = new RegExp(pattern)\n\n    // Check minimum properties\n    if (schema.minProperties && Object.keys(config).length < schema.minProperties) {\n      errors.push({\n        path: '',\n        message: `Configuration must have at least ${schema.minProperties} app(s)`,\n        value: config\n      })\n    }\n\n    // Validate each app configuration\n    for (const [appName, appConfig] of Object.entries(config)) {\n      if (!regex.test(appName)) {\n        errors.push({\n          path: appName,\n          message: `App name does not match pattern: ${pattern}`,\n          value: appName\n        })\n        continue\n      }\n\n      const appErrors = validateProperty(appConfig, appSchema, appName)\n      errors.push(...appErrors)\n    }\n  }\n\n  return {\n    valid: errors.length === 0,\n    errors\n  }\n}\n\n/**\n * Load configuration from a config object with validation\n *\n * @param {Object} config - Configuration object\n * @param {Object} schema - JSON schema for validation\n * @param {Object} options - Options\n * @param {boolean} [options.strict=true] - Throw error on validation failure\n * @param {Function} [options.onError] - Error callback function\n * @returns {Object|null} Validated configuration or null if invalid (when strict=false)\n */\nexport function loadConfig(config, schema, options = {}) {\n  const { strict = true, onError } = options\n\n  // Validate configuration\n  const validationResult = validateConfig(config, schema)\n\n  if (!validationResult.valid) {\n    const errorMessage = `Configuration validation failed:\\n${validationResult.errors\n      .map(e => `  - ${e.path}: ${e.message}`)\n      .join('\\n')}`\n\n    // Call error callback if provided\n    if (onError) {\n      onError(validationResult.errors)\n    }\n\n    // Strict mode: throw error\n    if (strict) {\n      const error = new Error(errorMessage)\n      error.validationErrors = validationResult.errors\n      throw error\n    }\n\n    // Non-strict mode: log warning and return null\n    console.warn('[CONFIG LOADER]', errorMessage)\n    return null\n  }\n\n  // Configuration is valid\n  console.log('[CONFIG LOADER] Configuration validated successfully')\n  return config\n}\n\n/**\n * Get environment-specific URL from micro-app entry configuration\n *\n * @param {Object} entry - Entry configuration object with environment URLs\n * @param {string} [env] - Target environment (defaults to 'development')\n * @returns {string} Environment-specific URL\n *\n * IMPORTANT: In pre-built libraries, import.meta.env reflects the library's build-time environment,\n * NOT the consuming app's runtime environment. Therefore:\n * - Always pass explicit env parameter from the consuming app\n * - Default to 'development' to avoid unexpected production URLs in dev mode\n */\nexport function getEntryUrl(entry, env) {\n  if (!entry || typeof entry !== 'object') {\n    throw new Error('Invalid entry configuration')\n  }\n\n  // Determine environment\n  // Priority: explicit env param > 'development' default\n  // NOTE: DO NOT use import.meta.env here - it reflects library build-time, not runtime!\n  let targetEnv = env\n\n  if (!targetEnv) {\n    // Default to development to avoid serving production URLs in dev mode\n    targetEnv = 'development'\n    console.warn(\n      `[CONFIG LOADER] No explicit env provided, defaulting to 'development'. ` +\n      `Pass env parameter explicitly from consuming app to ensure correct environment.`\n    )\n  }\n\n  console.log(`[CONFIG LOADER] Environment detection: ${targetEnv}`)\n\n  // Get URL for target environment\n  const url = entry[targetEnv]\n\n  if (!url) {\n    // Fallback order: development -> production\n    const fallbackUrl = entry.development || entry.production\n\n    if (!fallbackUrl) {\n      throw new Error(`No URL found for environment: ${targetEnv}`)\n    }\n\n    console.warn(\n      `[CONFIG LOADER] No URL for environment '${targetEnv}', using fallback: ${fallbackUrl}`\n    )\n    return fallbackUrl\n  }\n\n  return url\n}\n\n/**\n * Deep merge two configuration objects\n * Used for merging default config with user config\n *\n * @param {Object} target - Target object (defaults)\n * @param {Object} source - Source object (overrides)\n * @returns {Object} Merged configuration\n */\nexport function mergeConfig(target, source) {\n  const result = { ...target }\n\n  for (const [key, value] of Object.entries(source)) {\n    if (value && typeof value === 'object' && !Array.isArray(value)) {\n      result[key] = mergeConfig(result[key] || {}, value)\n    } else {\n      result[key] = value\n    }\n  }\n\n  return result\n}\n\n/**\n * Create default Wujie configuration from app config\n *\n * @param {Object} appConfig - Micro-app configuration\n * @param {string} [env] - Target environment\n * @returns {Object} Wujie-compatible configuration\n */\nexport function createWujieConfig(appConfig, env) {\n  if (!appConfig) {\n    throw new Error('App configuration is required')\n  }\n\n  const { name, entry, wujie = {} } = appConfig\n\n  return {\n    name,\n    url: getEntryUrl(entry, env),\n    exec: wujie.exec !== undefined ? wujie.exec : true,\n    alive: wujie.alive !== undefined ? wujie.alive : true,\n    sync: wujie.sync !== undefined ? wujie.sync : true,\n    props: wujie.props || {},\n    attrs: wujie.attrs || {}\n  }\n}\n\n/**\n * Validate port uniqueness across apps\n *\n * @param {Object} config - Full micro-apps configuration\n * @returns {Array} Array of port conflict errors\n */\nexport function validatePortUniqueness(config) {\n  const portMap = new Map()\n  const conflicts = []\n\n  for (const [appName, appConfig] of Object.entries(config)) {\n    const port = appConfig.port\n\n    if (portMap.has(port)) {\n      conflicts.push({\n        port,\n        apps: [portMap.get(port), appName],\n        message: `Port ${port} is used by multiple apps: ${portMap.get(port)}, ${appName}`\n      })\n    } else {\n      portMap.set(port, appName)\n    }\n  }\n\n  return conflicts\n}\n\n/**\n * Validate basePath uniqueness across apps\n *\n * @param {Object} config - Full micro-apps configuration\n * @returns {Array} Array of basePath conflict errors\n */\nexport function validateBasePathUniqueness(config) {\n  const pathMap = new Map()\n  const conflicts = []\n\n  for (const [appName, appConfig] of Object.entries(config)) {\n    const basePath = appConfig.basePath\n\n    if (pathMap.has(basePath)) {\n      conflicts.push({\n        basePath,\n        apps: [pathMap.get(basePath), appName],\n        message: `BasePath ${basePath} is used by multiple apps: ${pathMap.get(basePath)}, ${appName}`\n      })\n    } else {\n      pathMap.set(basePath, appName)\n    }\n  }\n\n  return conflicts\n}\n\nexport default {\n  validateConfig,\n  loadConfig,\n  getEntryUrl,\n  mergeConfig,\n  createWujieConfig,\n  validatePortUniqueness,\n  validateBasePathUniqueness\n}\n"],"names":[],"mappings":"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"}