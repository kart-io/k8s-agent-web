{"version":3,"file":"tree.js","sources":["../../src/utils/tree.js"],"sourcesContent":["/**\n * 树形数据处理工具函数\n */\n\n/**\n * 将列表转换为树形结构\n * @param {Array} list - 列表数据\n * @param {Object} options - 配置选项\n * @returns {Array} 树形数据\n */\nexport function listToTree(list, options = {}) {\n  const {\n    id = 'id',\n    parentId = 'parentId',\n    children = 'children',\n    rootValue = null\n  } = options\n\n  const tree = []\n  const map = {}\n\n  // 创建映射\n  list.forEach(item => {\n    map[item[id]] = { ...item, [children]: [] }\n  })\n\n  // 构建树\n  list.forEach(item => {\n    const node = map[item[id]]\n    const parent = map[item[parentId]]\n\n    if (item[parentId] === rootValue || !parent) {\n      tree.push(node)\n    } else {\n      parent[children].push(node)\n    }\n  })\n\n  return tree\n}\n\n/**\n * 将树形结构转换为列表\n * @param {Array} tree - 树形数据\n * @param {Object} options - 配置选项\n * @returns {Array} 列表数据\n */\nexport function treeToList(tree, options = {}) {\n  const {\n    children = 'children'\n  } = options\n\n  const list = []\n\n  function traverse(nodes) {\n    nodes.forEach(node => {\n      const { [children]: kids, ...rest } = node\n      list.push(rest)\n\n      if (kids && kids.length > 0) {\n        traverse(kids)\n      }\n    })\n  }\n\n  traverse(tree)\n  return list\n}\n\n/**\n * 查找树节点\n * @param {Array} tree - 树形数据\n * @param {Function} predicate - 查找条件\n * @param {Object} options - 配置选项\n * @returns {Object|null} 找到的节点\n */\nexport function findNode(tree, predicate, options = {}) {\n  const { children = 'children' } = options\n\n  function traverse(nodes) {\n    for (const node of nodes) {\n      if (predicate(node)) {\n        return node\n      }\n\n      if (node[children] && node[children].length > 0) {\n        const found = traverse(node[children])\n        if (found) {\n          return found\n        }\n      }\n    }\n    return null\n  }\n\n  return traverse(tree)\n}\n\n/**\n * 查找节点路径\n * @param {Array} tree - 树形数据\n * @param {Function} predicate - 查找条件\n * @param {Object} options - 配置选项\n * @returns {Array} 节点路径\n */\nexport function findPath(tree, predicate, options = {}) {\n  const { children = 'children' } = options\n\n  function traverse(nodes, path = []) {\n    for (const node of nodes) {\n      const currentPath = [...path, node]\n\n      if (predicate(node)) {\n        return currentPath\n      }\n\n      if (node[children] && node[children].length > 0) {\n        const found = traverse(node[children], currentPath)\n        if (found) {\n          return found\n        }\n      }\n    }\n    return null\n  }\n\n  return traverse(tree) || []\n}\n\n/**\n * 过滤树节点\n * @param {Array} tree - 树形数据\n * @param {Function} predicate - 过滤条件\n * @param {Object} options - 配置选项\n * @returns {Array} 过滤后的树\n */\nexport function filterTree(tree, predicate, options = {}) {\n  const { children = 'children' } = options\n\n  function traverse(nodes) {\n    return nodes\n      .filter(predicate)\n      .map(node => ({\n        ...node,\n        [children]: node[children] ? traverse(node[children]) : []\n      }))\n  }\n\n  return traverse(tree)\n}\n\n/**\n * 遍历树节点\n * @param {Array} tree - 树形数据\n * @param {Function} callback - 回调函数\n * @param {Object} options - 配置选项\n */\nexport function traverseTree(tree, callback, options = {}) {\n  const { children = 'children' } = options\n\n  function traverse(nodes, parent = null, level = 0) {\n    nodes.forEach((node, index) => {\n      callback(node, parent, level, index)\n\n      if (node[children] && node[children].length > 0) {\n        traverse(node[children], node, level + 1)\n      }\n    })\n  }\n\n  traverse(tree)\n}\n\n/**\n * 获取所有叶子节点\n * @param {Array} tree - 树形数据\n * @param {Object} options - 配置选项\n * @returns {Array} 叶子节点列表\n */\nexport function getLeafNodes(tree, options = {}) {\n  const { children = 'children' } = options\n  const leaves = []\n\n  function traverse(nodes) {\n    nodes.forEach(node => {\n      if (!node[children] || node[children].length === 0) {\n        leaves.push(node)\n      } else {\n        traverse(node[children])\n      }\n    })\n  }\n\n  traverse(tree)\n  return leaves\n}\n"],"names":[],"mappings":"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"}