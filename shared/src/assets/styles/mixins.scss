/**
 * Shared Sass Mixins
 * Feature 003: Project Structure Optimization
 *
 * This file provides reusable mixins for common CSS patterns.
 * These mixins are auto-imported via Vite configuration.
 *
 * @module @k8s-agent/shared/assets/styles/mixins
 */

@import './variables.scss';

// ==================== Layout Mixins ====================

/**
 * Flexbox centering (both horizontal and vertical)
 */
@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

/**
 * Flexbox with custom alignment
 * @param {string} $justify - justify-content value
 * @param {string} $align - align-items value
 */
@mixin flex($justify: flex-start, $align: stretch) {
  display: flex;
  justify-content: $justify;
  align-items: $align;
}

/**
 * Flexbox column layout
 */
@mixin flex-column {
  display: flex;
  flex-direction: column;
}

/**
 * Flex item that grows to fill space
 */
@mixin flex-1 {
  flex: 1;
  min-width: 0;
  min-height: 0;
}

/**
 * Absolute positioning to fill parent
 */
@mixin fill-parent {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

// ==================== Typography Mixins ====================

/**
 * Text ellipsis (single line)
 */
@mixin ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/**
 * Multi-line text ellipsis
 * @param {number} $lines - number of lines to show
 */
@mixin line-clamp($lines: 2) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
}

/**
 * Hide text visually but keep it accessible
 */
@mixin sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

// ==================== Visual Effects ====================

/**
 * Box shadow
 * @param {string} $size - sm | md | lg | xl
 */
@mixin shadow($size: md) {
  @if $size == sm {
    box-shadow: $shadow-sm;
  } @else if $size == md {
    box-shadow: $shadow-md;
  } @else if $size == lg {
    box-shadow: $shadow-lg;
  } @else if $size == xl {
    box-shadow: $shadow-xl;
  }
}

/**
 * Card styling with shadow
 */
@mixin card {
  background: $component-background;
  border-radius: $border-radius-md;
  box-shadow: $card-shadow;
  padding: $padding-md;
}

/**
 * Smooth transition
 * @param {string} $property - CSS property to transition
 * @param {string} $duration - transition duration (optional)
 */
@mixin transition($property: all, $duration: $transition-duration-base) {
  transition: $property $duration $ease-in-out;
}

/**
 * Hover effect with smooth transition
 * @content - CSS rules for :hover state
 */
@mixin hover-effect {
  @include transition(all, $transition-duration-fast);

  &:hover {
    @content;
  }
}

// ==================== Responsive Mixins ====================

/**
 * Media query for minimum width
 * @param {string} $breakpoint - xs | sm | md | lg | xl | xxl or custom value
 */
@mixin respond-above($breakpoint) {
  $bp: $breakpoint;

  @if $breakpoint == xs {
    $bp: $screen-xs;
  } @else if $breakpoint == sm {
    $bp: $screen-sm;
  } @else if $breakpoint == md {
    $bp: $screen-md;
  } @else if $breakpoint == lg {
    $bp: $screen-lg;
  } @else if $breakpoint == xl {
    $bp: $screen-xl;
  } @else if $breakpoint == xxl {
    $bp: $screen-xxl;
  }

  @media (min-width: $bp) {
    @content;
  }
}

/**
 * Media query for maximum width
 * @param {string} $breakpoint - xs | sm | md | lg | xl | xxl or custom value
 */
@mixin respond-below($breakpoint) {
  $bp: $breakpoint;

  @if $breakpoint == xs {
    $bp: $screen-xs - 1px;
  } @else if $breakpoint == sm {
    $bp: $screen-sm - 1px;
  } @else if $breakpoint == md {
    $bp: $screen-md - 1px;
  } @else if $breakpoint == lg {
    $bp: $screen-lg - 1px;
  } @else if $breakpoint == xl {
    $bp: $screen-xl - 1px;
  } @else if $breakpoint == xxl {
    $bp: $screen-xxl - 1px;
  }

  @media (max-width: $bp) {
    @content;
  }
}

/**
 * Media query for range between two breakpoints
 */
@mixin respond-between($min, $max) {
  @media (min-width: $min) and (max-width: $max - 1px) {
    @content;
  }
}

// ==================== Utility Mixins ====================

/**
 * Clearfix for float layouts
 */
@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

/**
 * Disable user selection
 */
@mixin no-select {
  user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}

/**
 * Reset button styles
 */
@mixin reset-button {
  padding: 0;
  margin: 0;
  border: none;
  background: none;
  cursor: pointer;
  font-family: inherit;
  font-size: inherit;
  line-height: inherit;

  &:focus {
    outline: none;
  }
}

/**
 * Reset list styles
 */
@mixin reset-list {
  list-style: none;
  padding: 0;
  margin: 0;
}

/**
 * Scrollbar styling
 * @param {string} $width - scrollbar width
 * @param {color} $track-color - track background color
 * @param {color} $thumb-color - thumb background color
 */
@mixin scrollbar($width: 8px, $track-color: #f1f1f1, $thumb-color: #888) {
  &::-webkit-scrollbar {
    width: $width;
    height: $width;
  }

  &::-webkit-scrollbar-track {
    background: $track-color;
    border-radius: $border-radius-base;
  }

  &::-webkit-scrollbar-thumb {
    background: $thumb-color;
    border-radius: $border-radius-base;

    &:hover {
      background: darken($thumb-color, 10%);
    }
  }

  // Firefox scrollbar
  scrollbar-width: thin;
  scrollbar-color: $thumb-color $track-color;
}

// ==================== Component Mixins ====================

/**
 * Button base styles
 */
@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: $btn-padding-vertical $btn-padding-horizontal;
  height: $btn-height-base;
  border-radius: $border-radius-base;
  border: $border-width-base solid transparent;
  font-size: $font-size-base;
  font-weight: $font-weight-normal;
  line-height: $line-height-base;
  cursor: pointer;
  @include transition(all);
  @include no-select;

  &:disabled {
    cursor: not-allowed;
    opacity: 0.6;
  }
}

/**
 * Input base styles
 */
@mixin input-base {
  width: 100%;
  padding: $input-padding-vertical $input-padding-horizontal;
  height: $input-height-base;
  border: $border-width-base solid $border-color-base;
  border-radius: $border-radius-base;
  font-size: $font-size-base;
  line-height: $line-height-base;
  color: $text-color;
  background-color: $component-background;
  @include transition(all);

  &:hover {
    border-color: $primary-color-hover;
  }

  &:focus {
    border-color: $primary-color;
    outline: none;
    box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);
  }

  &:disabled {
    color: $text-color-disabled;
    background-color: $background-color-light;
    cursor: not-allowed;
  }
}
